import pandas as pd
import pytz

# Load your dataset
file_path = 'C:/Users/michalis/Desktop/data_analyst_dataset1.csv'  # Replace with your file path
data = pd.read_csv(file_path)

# Convert Unix timestamp to datetime in Europe/Athens timezone
data['timestamp'] = pd.to_datetime(data['timestamp'], unit='s', utc=True).dt.tz_convert('Europe/Athens')

# Extract the date from the timestamp
data['date'] = data['timestamp'].dt.date

# Group by store_id and date and count unique customers per day per store
daily_customer_counts= data.groupby(['store_id', 'date']).customer_id.nunique().reset_index()

# Sort the data to ensure it's in the correct order for comparison
daily_customer_counts = daily_customer_counts.sort_values(by=['store_id', 'date'])

# Calculate daily changes in customer counts for each store
daily_customer_counts['previous_day_customers'] = daily_customer_counts.groupby('store_id')['customer_id'].shift(1)

# Calculate the differences
daily_customer_counts['customer_diff'] = daily_customer_counts['customer_id'] - daily_customer_counts['previous_day_customers']

# Determine the categories based on the differences
more_customers = daily_customer_counts[daily_customer_counts['customer_diff'] > 0].groupby('date').store_id.nunique()
less_customers = daily_customer_counts[daily_customer_counts['customer_diff'] < 0].groupby('date').store_id.nunique()
same_customers = daily_customer_counts[daily_customer_counts['customer_diff'] == 0].groupby('date').store_id.nunique()

# Identifying first-time customers for each store
first_time_customers = daily_customer_counts[daily_customer_counts['previous_day_customers'].isna()]

# Calculate the network's average customer value
network_average = daily_customer_counts['customer_id'].mean()

# Count first-time stores with above and below network average customers
first_time_above_average = first_time_customers[first_time_customers['customer_id'] > network_average].groupby('date').store_id.nunique()
first_time_below_average = first_time_customers[first_time_customers['customer_id'] < network_average].groupby('date').store_id.nunique()

# Create a summary dataframe
stores_day = pd.DataFrame({
    'Stores with More Customers': more_customers,
    'Stores with Less Customers': less_customers,
    'Stores with Same Customers': same_customers,
    'First-time Stores': first_time_customers.groupby('date').store_id.nunique(),
    'First-time Stores Above Average': first_time_above_average,
    'First-time Stores Below Average': first_time_below_average
}).fillna(0).astype(int)  # Fill missing values with 0 and convert to integers

# Define the path for the CSV export
export_path = 'stores_day.csv'

# Export the summary data to a CSV file
stores_day.to_csv(export_path)
